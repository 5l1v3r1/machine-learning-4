#!/bin/bash

## local variables
DOCKER_VERSION='17.09.0~ce-0~ubuntu'
CONTAINER_VERSION='1.0'
PROJECT_ROOT="$1"
PWD=$(pwd)

if [[ ! $1 ]]; then
    PROJECT_ROOT='/vagrant'
fi

## re-runnable: the following allows this script to be re-runnable within the
##              vagrant environment:
##
##   - add 'vagrant' user to the docker group
##   - stop all docker containers
##   - remove all docker containers
##   - remove all docker images
##   - remove all docker volumes
##   - delete all docker networks
##
if [ "$PROJECT_ROOT" = '/vagrant' ] && which docker >/dev/null 2>&1; then
    sudo usermod -a -G docker vagrant
    sudo docker ps -q | xargs -r docker kill
    sudo docker ps -a -q | xargs -r docker rm
    sudo docker images -q -f dangling=true | xargs -r docker rmi
    sudo docker volume ls -qf dangling=true | xargs -r docker volume rm
    sudo docker network ls -q | xargs -r docker network rm
fi

## install docker to specific version
##
## Note: we install docker per dockers official documentation:
##
##       https://docs.docker.com/engine/installation/linux/ubuntu/
##
if ! sudo apt-cache policy docker-ce | grep -q "$DOCKER_VERSION"; then
    sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt-get -y update
    sudo apt-get -y install docker-ce="$DOCKER_VERSION"
fi

## run directly from dockerhub
if [ "$PROJECT_ROOT" = '/vagrant' ]; then
    ## run unit test(s)
    ##
    ## @docker run:
    ##     -d, run container in background and print container ID
    ##     -t, allocate pseudo-tty instead of default tty to running container
    ##
    sudo docker network create -d bridge app_nw &&
    sudo docker run -d --name default --net=app_nw "jeff1evesque/ml-default:${CONTAINER_VERSION}" &&
    sudo docker run -d --name redis --net=app_nw "jeff1evesque/ml-redis:${CONTAINER_VERSION}" &&
    sudo docker run -d --name mongodb --net=app_nw "jeff1evesque/ml-mongodb:${CONTAINER_VERSION}" &&
    sudo docker run -d --name webserver --net=app_nw --mount type=bind,source="$PROJECT_ROOT",target=/var/machine-learning "jeff1evesque/ml-webserver:${CONTAINER_VERSION}" &&
    sudo docker run -d --name mariadb --net=app_nw "jeff1evesque/ml-mariadb:${CONTAINER_VERSION}"

## build from local dockerfiles
else
    ## build docker container(s)
    cd "$PROJECT_ROOT" || exit
    sudo docker build -f default.dockerfile -t ml-default .
    sudo docker build -f redis.dockerfile -t ml-redis .
    sudo docker build -f mariadb.dockerfile -t ml-mariadb .
    sudo docker build -f mongodb.dockerfile -t ml-mongodb .
    sudo docker build -f webserver.dockerfile -t ml-webserver .
    cd "$PWD" || exit

    ## run unit test(s)
    ##
    ## @docker run:
    ##     -d, run container in background and print container ID
    ##     -t, allocate pseudo-tty instead of default tty to running container
    ##
    sudo docker network create -d bridge app_nw &&
    sudo docker run --name base --net=app_nw -d ml-default &&
    sudo docker run --name redis --net=app_nw -d ml-redis &&
    sudo docker run --name mongodb --net=app_nw -d ml-mongodb &&
    sudo docker run --name webserver --net=app_nw --mount type=bind,source="$PROJECT_ROOT",target=/var/machine-learning -d ml-webserver run-api &&
    sudo docker run --name mariadb --net=app_nw -d ml-mariadb
fi

## provision mongodb authorization
sudo docker exec -it mongodb sudo mongo admin mongodb://mongodb:27017 --eval "db.createUser({\
    user: 'authenticated',\
    pwd: 'password',\
    roles: [\
        'readWrite',\
        'userAdmin',\
        'dbAdmin',\
        { role: 'readWrite', db: 'dataset' },\
        { role: 'userAdmin', db: 'dataset' },\
        { role: 'dbAdmin', db: 'dataset' },\
    ]\
},\
{ w: 'majority' , wtimeout: 5000 } )" --quiet
sudo docker exec -it mongodb sudo sed -i "/#[[:space:]]*security:/s/^#//g" /etc/mongod.conf
sudo docker exec -it mongodb sudo sed -i "/#[[:space:]]*authorization:[[:space:]]*enabled/s/^#//g" /etc/mongod.conf
sudo docker exec -it mongodb sudo cat /etc/mongod.conf
#sudo docker restart mongodb

## run unit tests
if [ "$PROJECT_ROOT" = '/vagrant' ]; then
    sudo docker run --name webserver-pytest --net=app_nw -it "jeff1evesque/ml-webserver:${CONTAINER_VERSION}" test | sudo tee pytest.log
else
    sudo docker run --name webserver-pytest --net=app_nw --mount type=bind,source="$PROJECT_ROOT",target=/var/machine-learning -it ml-webserver test | sudo tee pytest.log
fi

## check unit test results
ERRORS=$(grep '= FAILURES =\|= ERRORS =\|= no tests ran in 0.00 seconds =' pytest.log)
if [ -n "$ERRORS" ]; then
    echo 'Error: unit test exited.'
    exit 1
fi


## acquire coverage results
##
## Note: more information regarding the '.coverage.docker' naming convention:
##
##       https://github.com/pytest-dev/pytest-cov/issues/146#issuecomment-272971136
##
sudo docker cp webserver-pytest:/var/machine-learning/.coverage "$PROJECT_ROOT"/.coverage.docker
if [ ! -f "$PROJECT_ROOT"/.coverage.docker ]; then
    exit 1
fi

## clean up vagrant environment: harddisk space is limited
##
##   - stop all docker containers
##   - remove all docker containers
##   - remove all docker images
##   - remove all docker volumes
##   - delete all docker networks
##
if [ "$PROJECT_ROOT" = '/vagrant' ]; then
    sudo docker ps -q | xargs -r docker kill
    sudo docker ps -a -q | xargs -r docker rm
    sudo docker images -q -f dangling=true | xargs -r docker rmi
    sudo docker volume ls -qf dangling=true | xargs -r docker volume rm
    sudo docker network ls -q | xargs -r docker network rm
fi
