sudo: required

language: python

## allows 'docker' command
services:
  - docker

## environment variables
env:
  global:
    - DOCKER_VERSION=1.12.0-0~trusty

## build docker, install puppet (i.e. puppet parser validate)
before_install:
  # docker version before update
  - docker version

  # list docker-engine versions
  #- apt-cache madison docker-engine

  # upgrade docker-engine to specific version
  - sudo apt-get -o Dpkg::Options::="--force-confnew" install -y docker-engine=${DOCKER_VERSION}

  # docker version after update
  - docker version

  # install puppet
  - wget https://apt.puppetlabs.com/puppetlabs-release-pc1-trusty.deb
  - sudo dpkg -i puppetlabs-release-pc1-trusty.deb
  - sudo apt-get update
  - sudo apt-get install puppet-agent -y

  # puppet version after update
  - sudo /opt/puppetlabs/bin/puppet -V

## install packages for linting
#
#  @trusty-backports, allows additional packages (i.e. shellcheck) to be installed
#
#  Note: unit testing is performed within the docker container, which is
#        defined from the Dockerfile.
install:
  - sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu/ trusty-backports restricted main universe"
  - pip install flake8==2.5.4
  - npm install -g jshint@2.9.1
  - npm install -g jscs@2.11.0
  - gem install scss_lint -v 0.38.0
  - npm install -g bootlint@0.14.2
  - gem install puppet-lint -v 1.1.0
  - gem install r10k -v 2.2.0
  - npm install -g jsonlint@1.6.2
  - gem install csvlint -v 0.3.0
  - sudo apt-get update
  - sudo apt-get install libxml2-utils=2.9.1+dfsg1-3ubuntu4.8
  - gem install mdl -v 0.3.1
  - sudo apt-get install shellcheck=0.3.3-1~ubuntu14.04.1
  - npm install -g eslint babel-eslint@6.0.0-beta.6
  - npm install -g eslint-plugin-react@4.2.3
  - gem install yaml-lint -v 0.0.7
  - npm install -g dockerlint@0.2.0

## implement linting
#
#  @puppet-lint, the following issue needs to be checked if it has been
#      resolved, so the '--no-ensure_first_param-check' abusive flag
#      implementation (below) can be removed:
#
#      - https://github.com/rodjek/puppet-lint/issues/410
#
#  @docker run:
#      -d, run container in background and print container ID
#      -t, allocate pseudo-tty instead of default tty to running container
#
#  Note: unit testing is performed within the docker container, which is
#        defined from the Dockerfile.
script:
  # lint codebase
  - flake8 .
  - jshint --verbose src/js/*.js --config test/lint/jshint.json --exclude-path test/lint/.jshintignore
  - jscs . --config test/lint/.jscs.json
  - scss-lint src/scss/*.scss
  - bootlint -d W005 interface/templates/*.html
  - sudo find puppet/environment/*/manifests -name '*.pp' -type f -exec /opt/puppetlabs/bin/puppet parser validate {} \;
  - sudo find puppet/environment/*/modules -name '*.pp' -type f -exec /opt/puppetlabs/bin/puppet parser validate {} \;
  - puppet-lint --no-variable_scope-check --no-ensure_first_param-check puppet/environment/*/modules
  - find puppet -name Puppetfile -exec sh -c 'cd "${1%/*}" && r10k puppetfile check Puppetfile' _ {} \;
  - find interface/static/data/json -name '*.json' -exec jsonlint -q {} \; -print
  - find interface/static/data/csv -name '*.csv' -exec csvlint {} \;
  - xmllint --noout interface/static/data/xml/svr*.xml --schema interface/static/data/xml/svr.xsd
  - xmllint --noout interface/static/data/xml/svm*.xml --schema interface/static/data/xml/svm.xsd
  - xmllint --noout interface/static/data/xml/*.xsd
  - mdl . --style test/lint/markdown.rb
  - find . -type f -exec grep -l '^#!/bin/bash' {} + | xargs shellcheck
  - find . -name '*.sh' -type f -exec shellcheck {} \;
  - eslint . --ext=jsx -c test/lint/eslint.json
  - yaml-lint hiera/
  - yaml-lint *.yaml
  - find . -name '*.dockerfile' -type f -exec dockerlint {} \;

  # build docker container(s)
  - docker build -f default.dockerfile -t container-default .
  - docker build -f redis.dockerfile -t container-redis .
  - docker build -f database.dockerfile -t container-database .
  - docker build -f webserver.dockerfile -t container-webserver .

  # run unit test(s): return 1 if match found (result negated)
  #
  # Note: travis has issues with exclamation, so it's contained in a subshell
  - docker network create -d bridge app_nw && docker run --name base --net=app_nw -d container-default && docker run --name redis --net=app_nw -d container-redis && docker run --name webserver --net=app_nw -d container-webserver run && docker run --name database --net=app_nw -d container-database && docker run --name webserver-pytest --net=app_nw -it container-webserver test  > pytest.log
  - cat pytest.log
  - (! grep -qE '= FAILURES =|= ERRORS =|= no tests ran in 0.00 seconds =' pytest.log)

  # check exit code: 'docker exec' will fail if the container has an exit code
  - docker exec -it webserver echo "'docker exec' only works on an active running container"
  - docker exec -it database echo "'docker exec' only works on an active running container"
  - docker exec -it redis echo "'docker exec' only works on an active running container"
  
  # list all containers
  - docker ps -a
