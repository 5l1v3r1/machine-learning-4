#!/bin/bash

# @imagemin: minify image file(s).
#
# @$1, first passed-in argument from command ($0 is the filename)
#
# Note: minifid GIF files lose their animated quality. This script minifies
#       all images except GIF (copied to the 'asset/').


# Pre-Pathing: allow 'imagemin' command
PATH="/usr/local/bin:$PATH"


# docker container
if [ "$1" = "/var/machine-learning" ]; then
  cd "$1"/src/img && for file in *; do
    # filename (without directory path)
    filename="${file##*/}"
    # get last `.` occurence as starting extension
    file_extension="${file##*.}"

    # minify with 'imagemin'
    if [ "$file_extension" = 'gif' ]; then
      cp "$1/src/img/$file" "$1/interface/static/img/$filename"
    else
      imagemin "$1/src/img/$file" > "$1/interface/static/img/$filename" &
    fi
  done

# vagrant container
else
  # track execution of script
  log_file="$1"/log/webcompiler/imagemin.log
  set -x;
  exec &> >(while read -r line; do
    log_date=$(date +%Y-%m-%d:%H:%M:%S)
    printf "%s %s\n" "[$log_date]" "$line" >> "$log_file"
  done)

  # watch '[root_dir]/src/img/' subdirectory
  inotifywait "$1"/src/img/ -m -e close_write -e move --format %f |
    # Minify Images
    while read -r file; do
      # filename (without directory path)
      filename="${file##*/}"
      # get last `.` occurence as starting extension
      file_extension="${file##*.}"

      # minify with 'imagemin'
      if [ "$file_extension" = 'gif' ]; then
        cp "$1/src/img/$file" "$1/interface/static/img/$filename"
      else
        imagemin "$1/src/img/$file" > "$1/interface/static/img/$filename" &
      fi
    done
fi
